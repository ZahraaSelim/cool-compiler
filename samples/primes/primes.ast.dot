digraph AST {
    node [shape=box];
    0 [label="Program\nLine: 27"];
    1 [label="Class: Main\nInherits: IO\nLine: 27"];
    2 [label="Method: main\nReturn: Int\nLine: 29"];
    3 [label="Int: 0\nLine: 30"];
    2 -> 3;
    1 -> 2;
    4 [label="Attribute: out\nType: Int\nLine: 33"];
    5 [label="Block\nLine: 34"];
    6 [label="MethodCall: out_string\nLine: 35"];
    7 [label="String: \"2 is trivially prime.\n\"\nLine: 35"];
    6 -> 7;
    5 -> 6;
    8 [label="Int: 2\nLine: 36"];
    5 -> 8;
    4 -> 5;
    1 -> 4;
    9 [label="Attribute: testee\nType: Int\nLine: 39"];
    10 [label="Id: out\nLine: 39"];
    9 -> 10;
    1 -> 9;
    11 [label="Attribute: divisor\nType: Int\nLine: 41"];
    1 -> 11;
    12 [label="Attribute: stop\nType: Int\nLine: 43"];
    13 [label="Int: 500\nLine: 43"];
    12 -> 13;
    1 -> 12;
    14 [label="Attribute: m\nType: Object\nLine: 45"];
    15 [label="While\nLine: 46"];
    16 [label="Bool: true\nLine: 46"];
    17 [label="Block\nLine: 47"];
    18 [label="Assignment: testee\nLine: 49"];
    19 [label="BinaryOp: +\nLine: 49"];
    20 [label="Id: testee\nLine: 49"];
    21 [label="Int: 1\nLine: 49"];
    19 -> 20;
    19 -> 21;
    18 -> 19;
    17 -> 18;
    22 [label="Assignment: divisor\nLine: 50"];
    23 [label="Int: 2\nLine: 50"];
    22 -> 23;
    17 -> 22;
    24 [label="While\nLine: 52"];
    25 [label="IfElse\nLine: 53"];
    26 [label="BinaryOp: <\nLine: 53"];
    27 [label="Id: testee\nLine: 53"];
    28 [label="BinaryOp: *\nLine: 53"];
    29 [label="Id: divisor\nLine: 53"];
    30 [label="Id: divisor\nLine: 53"];
    28 -> 29;
    28 -> 30;
    26 -> 27;
    26 -> 28;
    31 [label="Bool: false\nLine: 54"];
    32 [label="IfElse\nLine: 55"];
    33 [label="BinaryOp: =\nLine: 55"];
    34 [label="BinaryOp: -\nLine: 55"];
    35 [label="Id: testee\nLine: 55"];
    36 [label="BinaryOp: *\nLine: 55"];
    37 [label="Id: divisor\nLine: 55"];
    38 [label="BinaryOp: /\nLine: 55"];
    39 [label="Id: testee\nLine: 55"];
    40 [label="Id: divisor\nLine: 55"];
    38 -> 39;
    38 -> 40;
    36 -> 37;
    36 -> 38;
    34 -> 35;
    34 -> 36;
    41 [label="Int: 0\nLine: 55"];
    33 -> 34;
    33 -> 41;
    42 [label="Bool: false\nLine: 56"];
    43 [label="Bool: true\nLine: 57"];
    32 -> 33;
    32 -> 42;
    32 -> 43;
    25 -> 26;
    25 -> 31;
    25 -> 32;
    44 [label="Assignment: divisor\nLine: 60"];
    45 [label="BinaryOp: +\nLine: 60"];
    46 [label="Id: divisor\nLine: 60"];
    47 [label="Int: 1\nLine: 60"];
    45 -> 46;
    45 -> 47;
    44 -> 45;
    24 -> 25;
    24 -> 44;
    17 -> 24;
    48 [label="IfElse\nLine: 63"];
    49 [label="BinaryOp: <\nLine: 63"];
    50 [label="Id: testee\nLine: 63"];
    51 [label="BinaryOp: *\nLine: 63"];
    52 [label="Id: divisor\nLine: 63"];
    53 [label="Id: divisor\nLine: 63"];
    51 -> 52;
    51 -> 53;
    49 -> 50;
    49 -> 51;
    54 [label="Block\nLine: 65"];
    55 [label="Assignment: out\nLine: 66"];
    56 [label="Id: testee\nLine: 66"];
    55 -> 56;
    54 -> 55;
    57 [label="MethodCall: out_int\nLine: 67"];
    58 [label="Id: out\nLine: 67"];
    57 -> 58;
    54 -> 57;
    59 [label="MethodCall: out_string\nLine: 68"];
    60 [label="String: \" is prime.\n\"\nLine: 68"];
    59 -> 60;
    54 -> 59;
    61 [label="Int: 0\nLine: 71"];
    48 -> 49;
    48 -> 54;
    48 -> 61;
    17 -> 48;
    62 [label="IfElse\nLine: 74"];
    63 [label="BinaryOp: <=\nLine: 74"];
    64 [label="Id: stop\nLine: 74"];
    65 [label="Id: testee\nLine: 74"];
    63 -> 64;
    63 -> 65;
    66 [label="Dispatch: abort\nLine: 75"];
    67 [label="String: \"halt\"\nLine: 75"];
    66 -> 67;
    68 [label="String: \"continue\"\nLine: 77"];
    62 -> 63;
    62 -> 66;
    62 -> 68;
    17 -> 62;
    15 -> 16;
    15 -> 17;
    14 -> 15;
    1 -> 14;
    0 -> 1;
}

