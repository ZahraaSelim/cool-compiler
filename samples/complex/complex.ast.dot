digraph AST {
    node [shape=box];
    0 [label="Program\nLine: 1"];
    1 [label="Class: Main\nInherits: IO\nLine: 1"];
    2 [label="Method: main\nReturn: Object\nLine: 2"];
    3 [label="Let\nLine: 3"];
    4 [label="LetDecl: c\nType: Complex\nLine: 3"];
    5 [label="Dispatch: init\nLine: 3"];
    6 [label="New: Complex\nLine: 3"];
    5 -> 6;
    7 [label="Int: 1\nLine: 3"];
    5 -> 7;
    8 [label="Int: 1\nLine: 3"];
    5 -> 8;
    4 -> 5;
    3 -> 4;
    9 [label="IfElse\nLine: 4"];
    10 [label="BinaryOp: =\nLine: 4"];
    11 [label="Dispatch: reflect_Y\nLine: 4"];
    12 [label="Dispatch: reflect_X\nLine: 4"];
    13 [label="Id: c\nLine: 4"];
    12 -> 13;
    11 -> 12;
    14 [label="Dispatch: reflect_0\nLine: 4"];
    15 [label="Id: c\nLine: 4"];
    14 -> 15;
    10 -> 11;
    10 -> 14;
    16 [label="MethodCall: out_string\nLine: 5"];
    17 [label="String: \"=)\n\"\nLine: 5"];
    16 -> 17;
    18 [label="MethodCall: out_string\nLine: 6"];
    19 [label="String: \"=(\n\"\nLine: 6"];
    18 -> 19;
    9 -> 10;
    9 -> 16;
    9 -> 18;
    3 -> 9;
    2 -> 3;
    1 -> 2;
    0 -> 1;
    20 [label="Class: Complex\nInherits: IO\nLine: 12"];
    21 [label="Attribute: x\nType: Int\nLine: 13"];
    20 -> 21;
    22 [label="Attribute: y\nType: Int\nLine: 14"];
    20 -> 22;
    23 [label="Method: init\nReturn: Complex\nLine: 16"];
    24 [label="Formal: a\nType: Int\nLine: 16"];
    23 -> 24;
    25 [label="Formal: b\nType: Int\nLine: 16"];
    23 -> 25;
    26 [label="Block\nLine: 17"];
    27 [label="BinaryOp: =\nLine: 18"];
    28 [label="Id: x\nLine: 18"];
    29 [label="Id: a\nLine: 18"];
    27 -> 28;
    27 -> 29;
    26 -> 27;
    30 [label="BinaryOp: =\nLine: 19"];
    31 [label="Id: y\nLine: 19"];
    32 [label="Id: b\nLine: 19"];
    30 -> 31;
    30 -> 32;
    26 -> 30;
    33 [label="Id: self\nLine: 20"];
    26 -> 33;
    23 -> 26;
    20 -> 23;
    34 [label="Method: print\nReturn: Object\nLine: 24"];
    35 [label="IfElse\nLine: 25"];
    36 [label="BinaryOp: =\nLine: 25"];
    37 [label="Id: y\nLine: 25"];
    38 [label="Int: 0\nLine: 25"];
    36 -> 37;
    36 -> 38;
    39 [label="MethodCall: out_int\nLine: 26"];
    40 [label="Id: x\nLine: 26"];
    39 -> 40;
    41 [label="Dispatch: out_string\nLine: 27"];
    42 [label="Dispatch: out_int\nLine: 27"];
    43 [label="Dispatch: out_string\nLine: 27"];
    44 [label="MethodCall: out_int\nLine: 27"];
    45 [label="Id: x\nLine: 27"];
    44 -> 45;
    43 -> 44;
    46 [label="String: \"+\"\nLine: 27"];
    43 -> 46;
    42 -> 43;
    47 [label="Id: y\nLine: 27"];
    42 -> 47;
    41 -> 42;
    48 [label="String: \"I\"\nLine: 27"];
    41 -> 48;
    35 -> 36;
    35 -> 39;
    35 -> 41;
    34 -> 35;
    20 -> 34;
    49 [label="Method: reflect_0\nReturn: Complex\nLine: 31"];
    50 [label="Block\nLine: 32"];
    51 [label="BinaryOp: =\nLine: 33"];
    52 [label="Id: x\nLine: 33"];
    53 [label="UnaryOp: ~\nLine: 33"];
    54 [label="Id: x\nLine: 33"];
    53 -> 54;
    51 -> 52;
    51 -> 53;
    50 -> 51;
    55 [label="BinaryOp: =\nLine: 34"];
    56 [label="Id: y\nLine: 34"];
    57 [label="UnaryOp: ~\nLine: 34"];
    58 [label="Id: y\nLine: 34"];
    57 -> 58;
    55 -> 56;
    55 -> 57;
    50 -> 55;
    59 [label="Id: self\nLine: 35"];
    50 -> 59;
    49 -> 50;
    20 -> 49;
    60 [label="Method: reflect_X\nReturn: Complex\nLine: 39"];
    61 [label="Block\nLine: 40"];
    62 [label="BinaryOp: =\nLine: 41"];
    63 [label="Id: y\nLine: 41"];
    64 [label="UnaryOp: ~\nLine: 41"];
    65 [label="Id: y\nLine: 41"];
    64 -> 65;
    62 -> 63;
    62 -> 64;
    61 -> 62;
    66 [label="Id: self\nLine: 42"];
    61 -> 66;
    60 -> 61;
    20 -> 60;
    67 [label="Method: reflect_Y\nReturn: Complex\nLine: 46"];
    68 [label="Block\nLine: 47"];
    69 [label="BinaryOp: =\nLine: 48"];
    70 [label="Id: x\nLine: 48"];
    71 [label="UnaryOp: ~\nLine: 48"];
    72 [label="Id: x\nLine: 48"];
    71 -> 72;
    69 -> 70;
    69 -> 71;
    68 -> 69;
    73 [label="Id: self\nLine: 49"];
    68 -> 73;
    67 -> 68;
    20 -> 67;
    0 -> 20;
}

