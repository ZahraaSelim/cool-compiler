digraph AST {
    node [shape=box];
    0 [label="Program\nLine: 1"];
    1 [label="Class: BinOp\nLine: 1"];
    2 [label="Method: operate\nReturn: Int\nLine: 2"];
    3 [label="Formal: a\nType: Int\nLine: 2"];
    2 -> 3;
    4 [label="Formal: b\nType: Int\nLine: 2"];
    2 -> 4;
    5 [label="BinaryOp: +\nLine: 3"];
    6 [label="Id: a\nLine: 3"];
    7 [label="Id: b\nLine: 3"];
    5 -> 6;
    5 -> 7;
    2 -> 5;
    1 -> 2;
    8 [label="Method: optype\nReturn: String\nLine: 5"];
    9 [label="String: \" BinOp \"\nLine: 6"];
    8 -> 9;
    1 -> 8;
    0 -> 1;
    10 [label="Class: SumOp\nInherits: BinOp\nLine: 9"];
    11 [label="Method: optype\nReturn: String\nLine: 10"];
    12 [label="String: \" SumOp \"\nLine: 11"];
    11 -> 12;
    10 -> 11;
    0 -> 10;
    13 [label="Class: MulOp\nInherits: BinOp\nLine: 14"];
    14 [label="Method: optype\nReturn: String\nLine: 15"];
    15 [label="String: \" MulOp \"\nLine: 16"];
    14 -> 15;
    13 -> 14;
    16 [label="Method: operate\nReturn: Int\nLine: 18"];
    17 [label="Formal: a\nType: Int\nLine: 18"];
    16 -> 17;
    18 [label="Formal: b\nType: Int\nLine: 18"];
    16 -> 18;
    19 [label="BinaryOp: *\nLine: 19"];
    20 [label="Id: a\nLine: 19"];
    21 [label="Id: b\nLine: 19"];
    19 -> 20;
    19 -> 21;
    16 -> 19;
    13 -> 16;
    0 -> 13;
    22 [label="Class: IntList\nLine: 22"];
    23 [label="Attribute: head\nType: Int\nLine: 23"];
    22 -> 23;
    24 [label="Attribute: tail\nType: IntList\nLine: 24"];
    22 -> 24;
    25 [label="Attribute: empty_tail\nType: IntList\nLine: 25"];
    22 -> 25;
    26 [label="Method: tail_is_empty\nReturn: Bool\nLine: 26"];
    27 [label="BinaryOp: =\nLine: 27"];
    28 [label="Id: tail\nLine: 27"];
    29 [label="Id: empty_tail\nLine: 27"];
    27 -> 28;
    27 -> 29;
    26 -> 27;
    22 -> 26;
    30 [label="Method: get_head\nReturn: Int\nLine: 29"];
    31 [label="Id: head\nLine: 29"];
    30 -> 31;
    22 -> 30;
    32 [label="Method: set_head\nReturn: Int\nLine: 30"];
    33 [label="Formal: n\nType: Int\nLine: 30"];
    32 -> 33;
    34 [label="Assignment: head\nLine: 31"];
    35 [label="Id: n\nLine: 31"];
    34 -> 35;
    32 -> 34;
    22 -> 32;
    36 [label="Method: get_tail\nReturn: IntList\nLine: 33"];
    37 [label="Id: tail\nLine: 33"];
    36 -> 37;
    22 -> 36;
    38 [label="Method: set_tail\nReturn: IntList\nLine: 34"];
    39 [label="Formal: t\nType: IntList\nLine: 34"];
    38 -> 39;
    40 [label="Assignment: tail\nLine: 35"];
    41 [label="Id: t\nLine: 35"];
    40 -> 41;
    38 -> 40;
    22 -> 38;
    42 [label="Method: generate\nReturn: IntList\nLine: 37"];
    43 [label="Formal: n\nType: Int\nLine: 37"];
    42 -> 43;
    44 [label="Let\nLine: 38"];
    45 [label="LetDecl: l\nType: IntList\nLine: 38"];
    46 [label="New: IntList\nLine: 38"];
    45 -> 46;
    44 -> 45;
    47 [label="Block\nLine: 38"];
    48 [label="Dispatch: set_head\nLine: 39"];
    49 [label="Id: l\nLine: 39"];
    48 -> 49;
    50 [label="Id: n\nLine: 39"];
    48 -> 50;
    47 -> 48;
    51 [label="IfElse\nLine: 40"];
    52 [label="BinaryOp: =\nLine: 40"];
    53 [label="Id: n\nLine: 40"];
    54 [label="Int: 1\nLine: 40"];
    52 -> 53;
    52 -> 54;
    55 [label="Dispatch: set_tail\nLine: 41"];
    56 [label="Id: l\nLine: 41"];
    55 -> 56;
    57 [label="Id: empty_tail\nLine: 41"];
    55 -> 57;
    58 [label="Dispatch: set_tail\nLine: 43"];
    59 [label="Id: l\nLine: 43"];
    58 -> 59;
    60 [label="MethodCall: generate\nLine: 43"];
    61 [label="BinaryOp: -\nLine: 43"];
    62 [label="Id: n\nLine: 43"];
    63 [label="Int: 1\nLine: 43"];
    61 -> 62;
    61 -> 63;
    60 -> 61;
    58 -> 60;
    51 -> 52;
    51 -> 55;
    51 -> 58;
    47 -> 51;
    64 [label="Id: l\nLine: 45"];
    47 -> 64;
    44 -> 47;
    42 -> 44;
    22 -> 42;
    0 -> 22;
    65 [label="Class: Main\nLine: 49"];
    66 [label="Method: reduce\nReturn: Int\nLine: 50"];
    67 [label="Formal: result\nType: Int\nLine: 50"];
    66 -> 67;
    68 [label="Formal: op\nType: BinOp\nLine: 50"];
    66 -> 68;
    69 [label="Formal: l\nType: IntList\nLine: 50"];
    66 -> 69;
    70 [label="Block\nLine: 51"];
    71 [label="Assignment: result\nLine: 52"];
    72 [label="Dispatch: operate\nLine: 52"];
    73 [label="Id: op\nLine: 52"];
    72 -> 73;
    74 [label="Id: result\nLine: 52"];
    72 -> 74;
    75 [label="Dispatch: get_head\nLine: 52"];
    76 [label="Id: l\nLine: 52"];
    75 -> 76;
    72 -> 75;
    71 -> 72;
    70 -> 71;
    77 [label="IfElse\nLine: 53"];
    78 [label="BinaryOp: =\nLine: 53"];
    79 [label="Dispatch: tail_is_empty\nLine: 53"];
    80 [label="Id: l\nLine: 53"];
    79 -> 80;
    81 [label="Bool: true\nLine: 53"];
    78 -> 79;
    78 -> 81;
    82 [label="Id: result\nLine: 54"];
    83 [label="MethodCall: reduce\nLine: 56"];
    84 [label="Id: result\nLine: 56"];
    83 -> 84;
    85 [label="Id: op\nLine: 56"];
    83 -> 85;
    86 [label="Dispatch: get_tail\nLine: 56"];
    87 [label="Id: l\nLine: 56"];
    86 -> 87;
    83 -> 86;
    77 -> 78;
    77 -> 82;
    77 -> 83;
    70 -> 77;
    66 -> 70;
    65 -> 66;
    88 [label="Method: main\nReturn: Object\nLine: 60"];
    89 [label="Let\nLine: 61"];
    90 [label="LetDecl: op\nType: BinOp\nLine: 61"];
    91 [label="New: MulOp\nLine: 61"];
    90 -> 91;
    89 -> 90;
    92 [label="LetDecl: l\nType: IntList\nLine: 61"];
    93 [label="New: IntList\nLine: 61"];
    92 -> 93;
    89 -> 92;
    94 [label="LetDecl: io\nType: IO\nLine: 61"];
    95 [label="New: IO\nLine: 61"];
    94 -> 95;
    89 -> 94;
    96 [label="Block\nLine: 61"];
    97 [label="Assignment: l\nLine: 62"];
    98 [label="Dispatch: generate\nLine: 62"];
    99 [label="Id: l\nLine: 62"];
    98 -> 99;
    100 [label="Int: 4\nLine: 62"];
    98 -> 100;
    97 -> 98;
    96 -> 97;
    101 [label="Dispatch: out_int\nLine: 63"];
    102 [label="Id: io\nLine: 63"];
    101 -> 102;
    103 [label="Dispatch: reduce\nLine: 63"];
    104 [label="Id: self\nLine: 63"];
    103 -> 104;
    105 [label="Int: 1\nLine: 63"];
    103 -> 105;
    106 [label="Id: op\nLine: 63"];
    103 -> 106;
    107 [label="Id: l\nLine: 63"];
    103 -> 107;
    101 -> 103;
    96 -> 101;
    89 -> 96;
    88 -> 89;
    65 -> 88;
    0 -> 65;
}

